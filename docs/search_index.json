[["index.html", "Useful Tips Preface", " Useful Tips Lingyun Zhang 2022-05-28 Preface This book contains useful Tex, R and Python tips. "],["tex-tips.html", "Tex tips 0.1 Commenting in WinEdt 0.2 Rotate a table 0.3 Multiple rows in a table 0.4 Calligraphy fonts 0.5 Type degree 0.6 Use items in table", " Tex tips 0.1 Commenting in WinEdt In Winedt use Ctrl+Shift+Alt+ to comment a line and to uncomment a line use Ctrl+Shift+Alt+. Source: https://tex.stackexchange.com/questions/230997/which-windows-editors-have-comment-uncomment-keyboard-shortcuts 0.2 Rotate a table Q: How to rotate a table in latex? A: \\usepackage{rotating} \\begin{sidewaystable}[h] \\centering \\caption{Mean, Median and Standard Deviation at AU level from Simulations, where tolerance limit set at MB level and $p=0.04$} \\label{table04} \\scalebox{1}{ \\begin{tabular}{ccccccccc} \\hline Simu. &amp; Nat. REPNS Rate &amp; New Nat. REPNS Rate &amp; Mean &amp; New Mean &amp; Median &amp; New Median &amp; SD &amp; New SD \\\\ \\hline 1 &amp; 0.9533 &amp; 0.9467 &amp; 0.9519 &amp; 0.9469 &amp; 0.9604 &amp; 0.9545 &amp; 0.0427 &amp; 0.0291 \\\\ 2 &amp; 0.9533 &amp; 0.9467 &amp; 0.9519 &amp; 0.9466 &amp; 0.9604 &amp; 0.9545 &amp; 0.0427 &amp; 0.0344 \\\\ 3 &amp; 0.9533 &amp; 0.9467 &amp; 0.9519 &amp; 0.9467 &amp; 0.9604 &amp; 0.9544 &amp; 0.0427 &amp; 0.0301 \\\\ 4 &amp; 0.9533 &amp; 0.9467 &amp; 0.9519 &amp; 0.9466 &amp; 0.9604 &amp; 0.9545 &amp; 0.0427 &amp; 0.0302 \\\\ 5 &amp; 0.9533 &amp; 0.9467 &amp; 0.9519 &amp; 0.9468 &amp; 0.9604 &amp; 0.9545 &amp; 0.0427 &amp; 0.0291 \\\\ 6 &amp; 0.9533 &amp; 0.9467 &amp; 0.9519 &amp; 0.9466 &amp; 0.9604 &amp; 0.9543 &amp; 0.0427 &amp; 0.0304 \\\\ 7 &amp; 0.9533 &amp; 0.9467 &amp; 0.9519 &amp; 0.9467 &amp; 0.9604 &amp; 0.9544 &amp; 0.0427 &amp; 0.0298 \\\\ 8 &amp; 0.9533 &amp; 0.9466 &amp; 0.9519 &amp; 0.9467 &amp; 0.9604 &amp; 0.9545 &amp; 0.0427 &amp; 0.0342 \\\\ 9 &amp; 0.9533 &amp; 0.9467 &amp; 0.9519 &amp; 0.9467 &amp; 0.9604 &amp; 0.9546 &amp; 0.0427 &amp; 0.0296 \\\\ 10 &amp; 0.9533 &amp; 0.9466 &amp; 0.9519 &amp; 0.9468 &amp; 0.9604 &amp; 0.9546 &amp; 0.0427 &amp; 0.0292 \\\\ \\hline \\end{tabular} } \\end{sidewaystable} 0.3 Multiple rows in a table \\usepackage{multirow} \\begin{table}[htbp] \\label{no-lk-errors} \\begin{center} \\begin{tabular}{cc|cc} &amp; &amp; \\multicolumn{2}{c}{$S_2$}\\\\ &amp; &amp; present &amp; absent\\\\ \\hline \\multirow{2}{*}{$S_1$} &amp; present &amp; $x_{11}$ &amp; $x_{12}$\\\\ &amp; absent &amp; $x_{21}$ &amp; $-$ \\end{tabular} \\end{center} \\end{table} 0.4 Calligraphy fonts $\\mathcal{N}_0$ Source: https://tex.stackexchange.com/questions/84041/why-does-calm-n-give-m 0.5 Type degree $360^{\\circ}$ Source: http://web.ift.uib.no/HP/LaTeX_degree.html 0.6 Use items in table \\newcommand{\\tabitem}{~~\\llap{\\textbullet}~~} \\begin{table}[htbp] \\begin{center} \\begin{tabular}{ll} \\hline x &amp; itemized\\\\ \\hline 1 &amp; \\tabitem $x&lt;1$\\\\ &amp; \\tabitem $1\\le x \\le 2$\\\\ &amp; \\tabitem $x &gt;2$\\\\ \\hline \\end{tabular} \\end{center} \\end{table} Source: https://tex.stackexchange.com/questions/150492/how-to-use-itemize-in-table-environment "],["r-tips.html", "R tips 0.7 Testing character(0) in if statement 0.8 Removing/keeping objects 0.9 Creating frequency table 0.10 Programming with dplyr 0.11 Grouped grand summary 0.12 Add an extra column 0.13 Add an extra row 0.14 Arrangin rows in custom order 0.15 De-duplicate a dataframe 0.16 Anti- and semi-join 0.17 Simple recoding 0.18 Use grepl() to filter 0.19 Use cut() 0.20 Print string without quote 0.21 Find if a tibble is grouped 0.22 Find number of NAs 0.23 Subset a dataframe by NA 0.24 Covert NA to 0 0.25 Convert blank to NA 0.26 Label y axis in ggplot2 0.27 Set plot margins in ggplot2 0.28 Set plot margins in base R 0.29 Deal with long labels in ggplot2 0.30 Edit plotly object 0.31 Zoom in on a barchart 0.32 gridExtra and patchwork packages 0.33 Use forcats::fct_reorder() 0.34 Use rowMeans under mutate 0.35 List loaded packages 0.36 Function names in a loaded package 0.37 Vectorize a matrix 0.38 A list of functions 0.39 Use match.arg", " R tips 0.7 Testing character(0) in if statement v &lt;- character(0) identical(v, character(0)) # returns TRUE identical(v, &quot;&quot;) # returns FALSE identical(v, numeric(0)) # returns also FALSE Source: https://stackoverflow.com/questions/25640161/r-how-to-test-for-character0-in-if-statement 0.8 Removing/keeping objects Q: How to remove all objects but some from the workspace in R? A: rm(list=ls()[! ls() %in% c(&quot;a&quot;,&quot;b&quot;)]) 0.9 Creating frequency table library(tidyverse) df_ &lt;- data.frame(x = sample(letters[1:5], 100, replace = TRUE), y = sample(LETTERS[1:5], 100, replace = TRUE), stringsAsFactors = FALSE) # method 1 tab1 &lt;- table(df_$x, df_$y) the_df_1 &lt;- as.data.frame.matrix(tab1) %&gt;% add_column(x = row.names(tab1), .before = 1) row.names(the_df_1) &lt;- NULL (the_df_1) ## x A B C D E ## 1 a 5 4 1 6 3 ## 2 b 3 2 6 5 5 ## 3 c 4 4 4 3 2 ## 4 d 2 4 1 3 5 ## 5 e 3 5 8 5 7 # method 2 the_df_2 &lt;- df_ %&gt;% count(x, y) %&gt;% pivot_wider(id_cols = x, names_from = y, values_from = n) %&gt;% mutate(across(everything(), .fns = ~replace_na(.,0))) (the_df_2) ## # A tibble: 5 x 6 ## x A B C D E ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 a 5 4 1 6 3 ## 2 b 3 2 6 5 5 ## 3 c 4 4 4 3 2 ## 4 d 2 4 1 3 5 ## 5 e 3 5 8 5 7 0.10 Programming with dplyr library(dplyr) cols &lt;- c(&quot;am&quot;,&quot;gear&quot;) grouping_vars &lt;- rlang::syms(cols) my_df &lt;- mtcars %&gt;% group_by(!!!grouping_vars) %&gt;% summarise(mean_cyl=mean(cyl)) 0.11 Grouped grand summary library(tidyverse) # &gt; as.integer(Sys.Date()) # [1] 18290 set.seed(18290) fk_data &lt;- tibble(x = sample(letters[1:4], 12, replace = TRUE), y = rnorm(12), z = runif(12), w = rchisq(12, df = 5)) # method 1 the_summary_a &lt;- fk_data %&gt;% group_by(x) %&gt;% group_modify(function(x, ...) map_dfr(x, sum)) %&gt;% ungroup() # method 2 the_summary_b &lt;- fk_data %&gt;% group_by(x) %&gt;% summarise_all(.funs = sum) (list(the_summary_a, the_summary_b)) identical(the_summary_a, the_summary_b) 0.12 Add an extra column Q: How to add a column to a dataframe? A: library(tibble) # for add_column library(dplyr) df &lt;- data.frame(a = 1:5, b = 2:6, c = 3:7) %&gt;% add_column(d = 4:8, .after = 2) 0.13 Add an extra row library(tibble) # for add_row df_a &lt;- data.frame(x = letters[8:10], y = 1:3) (df_b &lt;- add_row(df_a, x = &quot;x&quot;, y = 10, .before = 1)) ## x y ## 1 x 10 ## 2 h 1 ## 3 i 2 ## 4 j 3 0.14 Arrangin rows in custom order library(dplyr) fk_data &lt;- data.frame(x = sample(LETTERS[1:6], 20, replace = TRUE), y = rnorm(20)) my_order &lt;- c(&quot;A&quot;, &quot;F&quot;, &quot;B&quot;, &quot;E&quot;, &quot;C&quot;, &quot;D&quot;) ordered_df &lt;- fk_data %&gt;% arrange(match(x, my_order), desc(y)) ordered_df ## x y ## 1 A 0.69766073 ## 2 A 0.66780057 ## 3 A 0.64152059 ## 4 A -1.19303007 ## 5 F 0.11479913 ## 6 F -0.09671459 ## 7 F -0.27533665 ## 8 F -0.47927448 ## 9 F -0.64877935 ## 10 F -0.91896997 ## 11 B -1.41644494 ## 12 E -0.62021724 ## 13 C 0.98708625 ## 14 C 0.14841498 ## 15 C -1.15437700 ## 16 D -0.41207674 ## 17 D -0.52108850 ## 18 D -0.53047022 ## 19 D -0.62064412 ## 20 D -1.01435629 Source: https://stackoverflow.com/questions/46129322/arranging-rows-in-custom-order-using-dplyr/46129338 0.15 De-duplicate a dataframe library(dplyr) a_df &lt;- data.frame(x = rep(letters[1:3], each = 2), y = rep(letters[2:4], each = 2), z = rep(1:2, each = 3)) (a_df) ## x y z ## 1 a b 1 ## 2 a b 1 ## 3 b c 1 ## 4 b c 2 ## 5 c d 2 ## 6 c d 2 b_df &lt;- a_df %&gt;% distinct() (b_df) ## x y z ## 1 a b 1 ## 2 b c 1 ## 3 b c 2 ## 4 c d 2 c_df &lt;- a_df %&gt;% distinct(x, y, .keep_all = TRUE) (c_df) ## x y z ## 1 a b 1 ## 2 b c 1 ## 3 c d 2 0.16 Anti- and semi-join library(dplyr) a_df &lt;- data.frame(x = rep(letters[1:3], each = 2), y = rep(letters[2:4], each = 2), z = rep(1:2, each = 3)) (a_df) ## x y z ## 1 a b 1 ## 2 a b 1 ## 3 b c 1 ## 4 b c 2 ## 5 c d 2 ## 6 c d 2 c_df &lt;- a_df %&gt;% distinct(x, y, .keep_all = TRUE) (c_df) ## x y z ## 1 a b 1 ## 2 b c 1 ## 3 c d 2 d_df &lt;- semi_join(a_df, c_df) (d_df) ## x y z ## 1 a b 1 ## 2 a b 1 ## 3 b c 1 ## 4 c d 2 ## 5 c d 2 e_df &lt;- anti_join(a_df, c_df) (e_df) ## x y z ## 1 b c 2 0.17 Simple recoding library(dplyr) x &lt;- letters[1:5] y &lt;- recode(x, a = &quot;apple&quot;) z &lt;- recode(x, b = &quot;banana&quot;) c(y, z) ## [1] &quot;apple&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;a&quot; &quot;banana&quot; &quot;c&quot; ## [9] &quot;d&quot; &quot;e&quot; Source: https://dplyr.tidyverse.org/reference/recode.html 0.18 Use grepl() to filter library(dplyr) df_1 &lt;- data.frame(x = c(&quot;x-18&quot;, sample(letters[1:3], 3), &quot;a-18&quot;, &quot;b-18&quot;), y = rnorm(6)) # get the rows where x contains &#39;-&#39; (df_2 &lt;- filter(df_1, grepl(&quot;-&quot;, x))) ## x y ## 1 x-18 -0.07099848 ## 2 a-18 -0.73153374 ## 3 b-18 0.71953434 0.19 Use cut() code_tempreture &lt;- function(x) {the_interval &lt;- cut(x, breaks = c(-Inf, 0, 10, 20, 30, +Inf), labels = c(&#39;freezing&#39;, &#39;cold&#39;, &#39;cool&#39;, &#39;warm&#39;, &#39;hot&#39;)) as.vector(the_interval) } x &lt;- runif(10, -10, 40) (test_re &lt;- code_tempreture(x)) ## [1] &quot;warm&quot; &quot;cool&quot; &quot;cool&quot; &quot;warm&quot; &quot;freezing&quot; &quot;hot&quot; ## [7] &quot;hot&quot; &quot;cool&quot; &quot;cool&quot; &quot;hot&quot; 0.20 Print string without quote df &lt;- data.frame(x = 1:3, y = 2:4, z = 3:5) (noquote(names(df))) 0.21 Find if a tibble is grouped is_grouped_df() Reference: https://stackoverflow.com/questions/42655746/determine-if-a-tibble-is-grouped-or-not 0.22 Find number of NAs Q: How to check NAs in a dataframe? A: colSums(is.na(df)) 0.23 Subset a dataframe by NA Q: How to get the rows which have NAs in a dataframe? A: new_DF &lt;- DF[rowSums(is.na(DF)) &gt; 0, ] 0.24 Covert NA to 0 Q: How to convert NA to 0 in a dataframe? A: df[is.na(df)] &lt;- 0 0.25 Convert blank to NA library(dplyr) fake_df &lt;- data.frame(x = c(1:2, &quot;&quot;, 3, 4, &quot;&quot;), y = c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;&quot;, &quot;&quot;, &quot;d&quot;), z = c(rep(TRUE, 4), &quot;&quot;, &quot;&quot;)) (fake_df) ## x y z ## 1 1 a TRUE ## 2 2 b TRUE ## 3 c TRUE ## 4 3 TRUE ## 5 4 ## 6 d converted_fake_df &lt;- fake_df %&gt;% mutate_all(na_if, &quot;&quot;) (converted_fake_df) ## x y z ## 1 1 a TRUE ## 2 2 b TRUE ## 3 &lt;NA&gt; c TRUE ## 4 3 &lt;NA&gt; TRUE ## 5 4 &lt;NA&gt; &lt;NA&gt; ## 6 &lt;NA&gt; d &lt;NA&gt; Source: https://stackoverflow.com/questions/24172111/change-the-blank-cells-to-na 0.26 Label y axis in ggplot2 Q: How to label y axis with percent/dollar/comma sign? A: p &lt;- ggplot(df, aes(x, y)) + geom_point() p + scale_y_continuous(labels = scales::percent) p + scale_y_continuous(labels = scales::dollar) p + scale_y_continuous(labels = scales::comma) 0.27 Set plot margins in ggplot2 library(ggplot2) my_df &lt;- data.frame(x = 1:10, y = 1:10) ggplot(my_df, aes(x, y)) + geom_point() + theme(plot.margin = unit(c(1, 2, 4, 6), &quot;cm&quot;)) # top, right, bottom and left 0.28 Set plot margins in base R # sets the bottom, left, top and right margins respectively of # the plot region in number of lines of text par(mar = c(10, 8, 4, 2)) plot(1:10, 1:10, xlab = &quot;x&quot;, ylab = &quot;y&quot;) 0.29 Deal with long labels in ggplot2 Source: https://stackoverflow.com/questions/41568411/how-to-maintain-size-of-ggplot-with-long-labels 0.30 Edit plotly object library(ggplot2) library(plotly) df &lt;- data.frame(x = c(1, 2, 3, 4), y = c(1, 5, 3, 5), group = c(&#39;A&#39;, &#39;A&#39;, &#39;B&#39;, &#39;B&#39;)) g &lt;- ggplot(data=df, aes(x = x, y = y, colour = group)) + geom_point(size = 4) + geom_hline(yintercept = 2) + scale_color_manual(values=c(&quot;red&quot;, &quot;blue&quot;)) + theme(plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), &quot;cm&quot;)) p &lt;- plotly_build(g) %&gt;% config(displayModeBar = FALSE) # to have a look at object p # str(p) # modify the text from &quot;~yintercept: 2&quot; to &quot;y-intercept = 2&quot; p$x$data[[3]]$text &lt;- &quot;y-intercept = 2&quot; p 0.31 Zoom in on a barchart library(ggplot2) library(gridExtra) the_data &lt;- data.frame(x = LETTERS[1:3], y = c(200, 300, 150)) # original p1 &lt;- ggplot(the_data, aes(x = x, weight = y)) + geom_bar(width = 0.5, fill = &quot;blue&quot;) + labs(x = &quot;&quot;) # zoomed p2 &lt;- p1 + coord_cartesian(ylim = c(100, 300)) # horizontal bars; zoomed p3 &lt;- p1 + coord_flip(ylim = c(100, 300)) p4 &lt;- ggplot() # put tem together grid.arrange(p1, p2, p3, p4, newpage = TRUE, layout_matrix = matrix(1:4, byrow = TRUE, 2, 2)) 0.32 gridExtra and patchwork packages library(ggplot2) library(gridExtra) # library(patchwork) r &lt;- function() data.frame(x = rnorm(100), y = rnorm(100)) p &lt;- function() ggplot(data = r(), aes(x, y)) + geom_point() # (p() | p()) / p() g1 &lt;- arrangeGrob(grobs = list(p(), p()), layout_matrix = matrix(1:2, ncol = 2, byrow = TRUE)) g2 &lt;- arrangeGrob(grobs = list(p()), nrow = 1, ncol = 1) grid.arrange(g1, g2, nrow = 2) Source: https://cran.r-project.org/web/packages/gridExtra/vignettes/arrangeGrob.html https://www.r-bloggers.com/how-to-plot-with-patchwork/ 0.33 Use forcats::fct_reorder() We can use forcats::fct_reorder() to easily order the bars. library(dplyr) library(ggplot2) library(forcats) library(gridExtra) fake_data &lt;- data.frame(category = c(&#39;d&#39;, &#39;b&#39;, &#39;a&#39;, &#39;c&#39;), prop = c(0.5, 0.3, 0.15, 0.05)) p_1 &lt;- fake_data %&gt;% ggplot(aes(x = category, weight = prop)) + geom_bar(width = 0.5, fill = &#39;red&#39;) + coord_flip() + labs(x = &quot;&quot;, y = &quot;&quot;) # the working of fct_reorder # &gt; y &lt;- fct_reorder(fake_data$category, fake_data$prop) # &gt; y # [1] d b a c # Levels: c a b d p_2 &lt;- fake_data %&gt;% ggplot(aes(x = fct_reorder(category, prop), weight = prop)) + geom_bar(width = 0.5, fill = &#39;blue&#39;) + coord_flip() + labs(x = &quot;&quot;, y = &quot;&quot;) grid.arrange(p_1, p_2, newpage = TRUE, layout_matrix = matrix(1:2, byrow = TRUE, 1, 2)) 0.34 Use rowMeans under mutate fk_data &lt;- data.frame(ID = 1:5, x = 1:5, y = 2:6, z = 3:7) new_data &lt;- fk_data %&gt;% mutate(the_mean = rowMeans(.[, 2:4])) new_data ## ID x y z the_mean ## 1 1 1 2 3 2 ## 2 2 2 3 4 3 ## 3 3 3 4 5 4 ## 4 4 4 5 6 5 ## 5 5 5 6 7 6 Source: https://stackoverflow.com/questions/33401788/dplyr-using-mutate-like-rowmeans 0.35 List loaded packages Q: How to list the packages currently loaded into Rs work space? A: (.packages()) Source: http://theobligatescientist.blogspot.com/2010/09/r-tip-listing-loaded-packages.html 0.36 Function names in a loaded package Q: How to find function names in a loaded package? A: Firstly load the package using library(), and then use lsf.str(package:package_name). For example library(tidyr) lsf.str(&quot;package:tidyr&quot;) Source: https://stackoverflow.com/questions/30392542/is-there-a-command-in-r-to-view-all-the-functions-present-in-a-package 0.37 Vectorize a matrix x &lt;- matrix(1:10, 2, 5) # vectorize it by columns c(x) # or as.vector(x) # vectorize it by rows c(t(x)) Source: https://stackoverflow.com/questions/4570537/vectorizing-a-matrix 0.38 A list of functions allocation_methods &lt;- list(&quot;proportion&quot; = function(x) x, &quot;square root&quot; = function(x) sqrt(x), &quot;cubic root&quot; = function(x) x^(1/3), &quot;log&quot; = function(x) log(x), &quot;kish&quot; = function(x) sqrt(x^2 + mean(x)^2)) 0.39 Use match.arg my_func &lt;- function(x, y, method = c(&quot;sum&quot;, &quot;subtract&quot;, &quot;multipliction&quot;)) {method &lt;- match.arg(method) switch(method, &quot;sum&quot; = x + y, &quot;subtract&quot; = x - y, &quot;multipliction&quot; = x * y) } "],["python-tips.html", "Python tips 0.40 Viewing all defined variables 0.41 type(), dir(), and help() 0.42 Commenting out", " Python tips 0.40 Viewing all defined variables dir() # gives the list of in scope variables: globals() # gives a dictionary of global variables locals() # gives a dictionary of local variables Source: https://stackoverflow.com/questions/633127/viewing-all-defined-variables 0.41 type(), dir(), and help() The type function shows the type of an object; the dir function lists all the methods available for an object; help function gives explanation about a method. Example: stuff = &quot;Hello world&quot; type(stuff) &lt;class &#39;str&#39;&gt; dir(stuff) help(str.capitalize) 0.42 Commenting out Single line comment: Ctrl + 1 Multi-line comment: select the lines to be commented Ctrl + 4 Unblock Multi-line comment: Ctrl + 5 Resource: https://stackoverflow.com/questions/36644144/shortcut-key-for-commenting-out-lines-of-python-code-in-spyder "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
